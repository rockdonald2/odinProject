/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _script_displayController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./script/displayController */ \"./src/script/displayController.js\");\n/* harmony import */ var _script_displayController__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_script_displayController__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _script_taskController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./script/taskController */ \"./src/script/taskController.js\");\n/* harmony import */ var _script_taskController__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_script_taskController__WEBPACK_IMPORTED_MODULE_1__);\n\n\n_script_displayController__WEBPACK_IMPORTED_MODULE_0__.displayController.initialLoad();\n/*\r\n    TODO: 1. sanitize input fields;\r\n    TODO: 2. markdown input;\r\n    -TODO: 3. archive function;\r\n    -TODO: 4. autodelete over - due tasks;\r\n    -TODO: 5. filtering;\r\n    -TODO: 6. local storage save;\r\n    -TODO: 7. delete category with all matching tasks;\r\n    -TODO: 8. search\r\n    -TODO: 9. popup info\r\n    TODO: 10. responsivity\r\n*/\n\n//# sourceURL=webpack://todoapp/./src/index.js?");

/***/ }),

/***/ "./src/script/displayController.js":
/*!*****************************************!*\
  !*** ./src/script/displayController.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var _require = __webpack_require__(/*! ./taskController */ \"./src/script/taskController.js\"),\n    taskController = _require.taskController;\n\nvar displayController = function () {\n  var headerAddTaskBtn = document.querySelector(\"#headerAddTaskBtn\");\n  var mainPanelAddTaskBtn = document.querySelector('#mainPanelAddTaskBtn');\n  var overlay = document.querySelector('.overlay');\n  var modal = document.querySelector('.modal');\n  var taskPanel = document.querySelector('#taskPanel');\n  var taskAddTimeBtn = document.querySelector('#taskAddTimeBtn');\n  var hideTaskAddTimeBtn = document.querySelector('#hideTaskAddTimeBtn');\n  var taskAddTimeBar = document.querySelector('#taskAddTimeBtn + div');\n\n  if (taskAddTimeBar) {\n    var today = new Date();\n    taskAddTimeBar.querySelector('input[type=\"date\"]').min = \"\".concat(today.getFullYear(), \"-\").concat(today.getMonth() <= 8 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1, \"-\").concat(today.getDate());\n  }\n\n  var taskAddCategoryBtn = document.querySelector('#taskAddCategoryBtn');\n  var hideTaskAddCategoryBtn = document.querySelector('#hideTaskAddCategoryBtn');\n  var taskAddCategoryBar = document.querySelector('#taskAddCategoryBtn + div');\n  var taskForm = document.querySelector('#taskForm');\n  var taskWrapper = document.querySelector('#taskWrapper');\n  var morePanel = document.querySelector('#morePanel');\n  var addCategoryBtn = document.querySelector('#addCategoryBtn');\n  var addCategoryPanel = document.querySelector('#addCategoryBtn + div');\n  var hideAddCategoryBtn = document.querySelector('#hideAddCategoryBtn');\n  var newCategoryForm = document.querySelector('#newCategoryForm');\n  var newCategoryLabel = document.querySelector('#newCategoryLabel');\n  var categoryWrapper = document.querySelector('#categoryWrapper');\n  var menuFilters = [document.querySelector('#todayTasksFilter'), document.querySelector('#allTasksFilter'), document.querySelector('#next7DaysTasksFilter'), document.querySelector('#archivedTasksFilter'), document.querySelector('.header--btns__uncompleted'), document.querySelector('.header--btns__archive')];\n  var categoryFilters = [];\n  var counterDots = [document.querySelector('.header--btns__uncompleted--dot'), document.querySelector('#allTasksCounter'), document.querySelector('#todayTasksCounter'), document.querySelector('#nextDaysTasksCounter')];\n  var currentFilter = 'All&&';\n  var popup = document.querySelector('.popup');\n  var popupTimeoutId = null;\n  var searchInput = document.querySelector('#searchInput');\n\n  function showAddTimeBar(e) {\n    hideTaskAddTimeBtn.addEventListener('click', hideAddTimeBar);\n    taskAddTimeBtn.classList.add('hidden');\n    taskAddTimeBar.classList.remove('hidden');\n  }\n\n  function hideAddTimeBar(e) {\n    taskAddTimeBtn.classList.remove('hidden');\n    taskAddTimeBar.classList.add('hidden');\n    taskForm.querySelector('#taskTime').value = '';\n  }\n\n  function showAddCategoryBar(e) {\n    hideTaskAddCategoryBtn.addEventListener('click', hideAddCategoryBar);\n    taskController.fillDropdownWithCategories(taskForm.querySelector('#taskCategory'));\n    taskAddCategoryBtn.classList.add('hidden');\n    taskAddCategoryBar.classList.remove('hidden');\n  }\n\n  function hideAddCategoryBar(e) {\n    taskAddCategoryBtn.classList.remove('hidden');\n    taskAddCategoryBar.classList.add('hidden');\n    taskForm.querySelector('#taskCategory').value = '';\n  }\n\n  function showTaskPanel(e, title, btnText, handleFn, index) {\n    showPanels(e);\n    e.preventDefault();\n    taskPanel.classList.remove('hidden');\n    taskPanel.querySelector('.modal--title').innerText = title;\n    taskPanel.querySelector('#taskSubmitBtn').innerText = btnText;\n    taskForm.removeEventListener('submit', handleAddTask);\n    taskForm.removeEventListener('submit', handleEditTask);\n    taskForm.addEventListener('submit', handleFn);\n    taskForm.dataset['postindex'] = index;\n    document.activeElement.blur();\n  }\n\n  function resetFormDisplay(e) {\n    taskForm.reset();\n    taskForm.querySelector('.modal--form__title--error').classList.add('hidden');\n  }\n\n  function hideTaskPanel(e) {\n    taskPanel.classList.add('hidden');\n    hideAddTimeBar();\n    hideAddCategoryBar();\n    resetFormDisplay();\n  }\n\n  function showPanels(e) {\n    overlay.classList.add('active');\n    modal.classList.add('active');\n  }\n\n  function hidePanels(e) {\n    if (e.type === 'click' || e.type === 'keydown' && e.key === 'Escape') {\n      overlay.classList.remove('active');\n      modal.classList.remove('active');\n      setTimeout(function () {\n        hideTaskPanel();\n        hideTaskMore();\n      }, 200);\n    }\n  }\n\n  function getFormData(form) {\n    var formElements = form.elements;\n    var formData = {\n      'title': formElements[0].value,\n      'note': formElements[1].value,\n      'dueTime': formElements[3].value,\n      'category': {\n        'name': formElements[6].value\n      }\n    };\n    return formData;\n  }\n\n  function populateTaskDom() {\n    var taskDOMs = taskController.createTaskDoms(currentFilter);\n    taskWrapper.innerHTML = '';\n    Object.keys(taskDOMs).forEach(function (tag) {\n      if (taskDOMs[tag] !== '') {\n        taskWrapper.innerHTML += \"\\n                    <section class=\\\"main-panel--days\\\">\\n                        <h2>\".concat(tag, \"</h2>\\n                    </section>\\n                    <section class=\\\"main-panel--tasks\\\">\\n                        <ul class=\\\"main-panel--tasks__list\\\">\\n                            \").concat(taskDOMs[tag], \"\\n                        </ul>\\n                    </section>\\n                \");\n      }\n    });\n    addListenersToElements(document.querySelectorAll('.main-panel--tasks__item--info'), 'click', showTaskInfo);\n    addListenersToElements(document.querySelectorAll('.main-panel--tasks__item--title > input[type=\"checkbox\"]'), 'change', changeTaskDoneness);\n    addListenersToElements(document.querySelectorAll('.main-panel--tasks__item--dropdown__edit'), 'click', editTask);\n    addListenersToElements(document.querySelectorAll('.main-panel--tasks__item--dropdown__archive'), 'click', archiveTask);\n    addListenersToElements(document.querySelectorAll('.main-panel--tasks__item--dropdown__delete'), 'click', deleteTask);\n    setCounterDots();\n  }\n\n  function setCounterDots() {\n    var dueTasksCounters = taskController.getDueTasksCounters();\n    counterDots.forEach(function (counter) {\n      counter.innerText = dueTasksCounters[counter.dataset['counter']];\n    });\n  }\n\n  function addListenersToElements(elements, event, fnHandler) {\n    elements.forEach(function (elem) {\n      elem.addEventListener(event, fnHandler);\n    });\n  }\n\n  function showTaskInfo(e) {\n    taskController.fillInfoPanelWithData(this.dataset['postindex'], morePanel);\n    showPanels(e);\n    morePanel.classList.remove('hidden');\n    document.activeElement.blur();\n  }\n\n  function hideTaskMore(e) {\n    morePanel.classList.add('hidden');\n  }\n\n  function changeTaskDoneness(e) {\n    taskController.changeTaskDoneness(this.dataset['postindex']);\n    setCounterDots();\n  }\n\n  function deleteTask(e) {\n    taskController.deleteTaskById(this.dataset['postindex']);\n    populateTaskDom(e);\n  }\n\n  function addTask(e) {\n    taskAddTimeBtn.addEventListener('click', showAddTimeBar);\n    taskAddCategoryBtn.addEventListener('click', showAddCategoryBar);\n    showTaskPanel(e, 'Add a task', 'Create task', handleAddTask, -1);\n  }\n\n  function handleAddTask(e) {\n    e.preventDefault();\n    var data = getFormData(this);\n\n    if (isFormValid(this, data)) {\n      taskController.createTask(data);\n      hidePanels({\n        'type': 'click'\n      });\n      populateTaskDom();\n    }\n\n    document.activeElement.blur();\n  }\n\n  function editTask(e) {\n    taskController.fillEditPanelWithData(this.dataset['postindex'], taskPanel);\n\n    if (taskPanel.querySelector('#taskCategory').value) {\n      showAddCategoryBar(e);\n    } else {\n      taskAddCategoryBtn.addEventListener('click', showAddCategoryBar);\n    }\n\n    if (taskPanel.querySelector('#taskTime').value) {\n      showAddTimeBar(e);\n    } else {\n      taskAddTimeBtn.addEventListener('click', showAddTimeBar);\n    }\n\n    showTaskPanel(e, 'Edit a task', 'Finalize task', handleEditTask, this.dataset['postindex']);\n  }\n\n  function handleEditTask(e) {\n    e.preventDefault();\n    var data = getFormData(this);\n\n    if (isFormValid(this, data)) {\n      taskController.editTask(this.dataset['postindex'], data);\n      hidePanels({\n        'type': 'click'\n      });\n      populateTaskDom();\n    }\n\n    document.activeElement.blur();\n  }\n\n  function archiveTask(e) {\n    taskController.archiveTaskById(this.dataset['postindex']);\n    populateTaskDom(e);\n  }\n\n  function isFormValid(form, data) {\n    if (!data['title']) {\n      form.querySelector('.modal--form__title--error').classList.remove('hidden');\n      return false;\n    }\n\n    return true;\n  }\n\n  function addCategory(e) {\n    e.preventDefault();\n\n    if (newCategoryLabel.value) {\n      taskController.createCategory(newCategoryLabel.value);\n    }\n\n    hideAddCategoryPanel();\n    populateCategoryDom();\n  }\n\n  function showAddCategoryPanel(e) {\n    document.activeElement.blur();\n    addCategoryPanel.classList.remove('hidden');\n  }\n\n  function hideAddCategoryPanel(e) {\n    addCategoryPanel.classList.add('hidden');\n    newCategoryLabel.value = '';\n  }\n\n  function populateCategoryDom() {\n    categoryWrapper.innerHTML = taskController.createCategoryDoms();\n    addListenersToElements(menuFilters, 'click', filterDOM);\n    addListenersToElements(categoryWrapper.querySelectorAll('.side-panel--category__title'), 'click', filterDOM);\n    addListenersToElements(categoryWrapper.querySelectorAll('.side-panel--category__del'), 'click', deleteCategory);\n  }\n\n  function deleteCategory() {\n    taskController.deleteCategoryByName(this.dataset['category']);\n    populateCategoryDom();\n    populateTaskDom();\n  }\n\n  function initialLoad() {\n    taskController.loadFromLocalStorage();\n    populateCategoryDom();\n    populateTaskDom();\n  }\n\n  function filterDOM() {\n    var tmpFilter = currentFilter.split('&');\n\n    if (this.dataset['filtertype'] === 'menu') {\n      document.querySelector('.side-panel--menu').querySelector('.active').classList.remove('active');\n      this.classList.add('active');\n\n      if (this.dataset['filter'] !== currentFilter.split('&')[0]) {\n        tmpFilter[0] = this.dataset['filter'];\n      } else {\n        tmpFilter[0] = 'All';\n      }\n    } else if (this.dataset['filtertype'] === 'category') {\n      if (this.dataset['filter'] !== currentFilter.split('&')[1]) {\n        tmpFilter[1] = this.dataset['filter'];\n      } else {\n        tmpFilter[1] = '';\n      }\n    }\n\n    currentFilter = tmpFilter.join('&');\n\n    if (tmpFilter[1] !== '') {\n      showPopUp('Current filters: ' + tmpFilter[0] + ', ' + tmpFilter[1]);\n    } else {\n      showPopUp('Current filter: ' + tmpFilter[0]);\n    }\n\n    populateTaskDom();\n  }\n\n  function showPopUp(msg) {\n    clearTimeout(popupTimeoutId);\n    popup.querySelector('#popupMsg').innerText = msg;\n    popup.classList.add('show');\n    popupTimeoutId = setTimeout(function () {\n      hidePopup();\n    }, 3000);\n  }\n\n  function hidePopup() {\n    popup.classList.remove('show');\n  }\n\n  function searchTask(e) {\n    var tmpFilter = currentFilter.split('&');\n    tmpFilter[2] = this.value;\n    currentFilter = tmpFilter.join('&');\n    populateTaskDom();\n  }\n\n  headerAddTaskBtn.addEventListener('click', addTask);\n  mainPanelAddTaskBtn.addEventListener('click', addTask);\n  addCategoryBtn.addEventListener('click', showAddCategoryPanel);\n  hideAddCategoryBtn.addEventListener('click', hideAddCategoryPanel);\n  newCategoryForm.addEventListener('submit', addCategory);\n  overlay.addEventListener('click', hidePanels);\n  document.addEventListener('keydown', hidePanels);\n  searchInput.addEventListener('input', searchTask);\n  return {\n    initialLoad: initialLoad\n  };\n}();\n\nmodule.exports = {\n  displayController: displayController\n};\n\n//# sourceURL=webpack://todoapp/./src/script/displayController.js?");

/***/ }),

/***/ "./src/script/taskController.js":
/*!**************************************!*\
  !*** ./src/script/taskController.js ***!
  \**************************************/
/***/ ((module) => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar taskController = function () {\n  var colors = ['#ee5253', '#feca57', '#00d2d3', '#222f3e', '#341f97', '#2e86de', '#ff9f43'];\n  var COLOR_MAIN = \"#70a1ff\";\n  var tasks = [];\n  var categories = {};\n\n  var Category = function Category(color, name) {\n    _classCallCheck(this, Category);\n\n    this.color = color;\n    this.name = name;\n  };\n\n  var idCounter = 0;\n\n  var Task = function Task(title, note, dueTime, category) {\n    _classCallCheck(this, Task);\n\n    this.id = idCounter++;\n    this.title = title;\n    this.note = note;\n    this.dueTime = dueTime;\n    this.category = categories[category.name];\n    this.isDone = false;\n    this.isArchived = false;\n  };\n\n  function getTaskById(id) {\n    for (var i = 0; i < tasks.length; ++i) {\n      if (id == tasks[i]['id']) {\n        return tasks[i];\n      }\n    }\n  }\n\n  function getTasksByCategory(cat) {\n    return tasks.filter(function (task) {\n      return task.category ? task.category.name === cat : false;\n    });\n  }\n\n  function createTask(data) {\n    var title = data.title,\n        note = data.note,\n        dueTime = data.dueTime,\n        category = data.category;\n    tasks.push(new Task(title, note, dueTime, category));\n    saveToLocalStorage();\n  }\n\n  function createCategory(name) {\n    categories[name] = new Category(colors[Math.floor(Math.random() * colors.length)], name);\n    saveToLocalStorage();\n  }\n\n  function editTask(index, data) {\n    Object.keys(data).forEach(function (key) {\n      if (key !== 'category') {\n        tasks[index][key] = data[key];\n      } else {\n        tasks[index][key] = categories[data[key]['name']];\n      }\n    });\n    saveToLocalStorage();\n  }\n\n  function createTaskDoms(filter) {\n    var untimed = \"\";\n    var today = \"\";\n    var tomorrow = \"\";\n    var nextSevenDays = \"\";\n    var archived = \"\";\n    var dateToday = new Date();\n    var msPerDay = 24 * 60 * 60 * 1000;\n    deleteOverDueTasks();\n\n    var _filter$split = filter.split('&'),\n        _filter$split2 = _slicedToArray(_filter$split, 3),\n        currentTime = _filter$split2[0],\n        currentCategory = _filter$split2[1],\n        currentTitleString = _filter$split2[2];\n\n    tasks.filter(function (task) {\n      if (currentCategory === '') {\n        return true;\n      } else {\n        if (task.category && task.category.name === currentCategory) {\n          return true;\n        }\n      }\n\n      return false;\n    }).filter(function (task) {\n      if (currentTitleString === '') {\n        return true;\n      } else {\n        if (task.title.toLowerCase().indexOf(currentTitleString) !== -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }).forEach(function (task, i) {\n      var taskDom = \"\\n                    <li class=\\\"main-panel--tasks__item\\\">\\n\\t\\t\\t\\t\\t\\t<div div class = \\\"main-panel--tasks__item--title\\\" >\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"checkbox\\\" data-postindex=\\\"\".concat(task.id, \"\\\" id=\\\"task\").concat(task.id, \"\\\" \").concat(task.isDone ? 'checked' : '', \">\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"main-panel--tasks__item--circle\\\" \\n\\t\\t\\t\\t\\t\\t\\t       style=\\\"border-color: \").concat(task.category ? task.category.color : COLOR_MAIN, \"\\\" for=\\\"task\").concat(task.id, \"\\\">&nbsp</label>\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"main-panel--tasks__item--text\\\" for=\\\"task\").concat(task.id, \"\\\">\").concat(task.title, \"</label>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n                            <span class=\\\"main-panel--tasks__item--duetime\\\">\").concat(task.dueTime === '' ? '' : 'Due ' + task.dueTime, \"</span>\\n                            <div class=\\\"main-panel--tasks__item--category\\\">\\n                                <span style=\\\"background-color: \").concat(task.category ? task.category.color : COLOR_MAIN, \"\\\">&nbsp;</span>\\n                                <span>\").concat(task.category ? task.category.name : 'Uncategorized', \"</span>\\n                            </div>\\n                            <button class=\\\"main-panel--tasks__item--info\\\" data-postindex=\\\"\").concat(task.id, \"\\\">\\n                                <svg class=\\\"w-6 h-6\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\\\"></path></svg>\\n                            </button>\\n                            <div class=\\\"main-panel--tasks__item--dropdown\\\">\\n                                <button class=\\\"main-panel--tasks__item--more\\\" disabled>\\n                                    <svg class=\\\"w-6 h-6\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\\\"></path></svg>\\n                                </button>\\n                                <ul class=\\\"main-panel--tasks__item--dropdown__list\\\">\\n                                    <li class=\\\"main-panel--tasks__item--dropdown__item\\\">\\n                                        <button button button type=\\\"button\\\"\\n                                        class=\\\"main-panel--tasks__item--dropdown__edit\\\"\\n                                        data-postindex = \\\"\").concat(task.id, \"\\\">\\n                                            <svg class=\\\"w-6 h-6\\\"\\n                                                fill=\\\"none\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n                                                <path stroke-linecap=\\\"round\\\"\\n                                                    stroke-linejoin=\\\"round\\\"\\n                                                    stroke-width=\\\"2\\\"\\n                                                    d=\\\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\\\"></path>\\n                                            </svg>\\n                                            Edit\\n                                        </button>\\n                                    </li>\\n                                    <li class=\\\"main-panel--tasks__item--dropdown__item\\\">\\n                                        <button type=\\\"button\\\"\\n                                        class=\\\"main-panel--tasks__item--dropdown__archive\\\"\\n                                        data-postindex=\\\"\").concat(task.id, \"\\\">\\n                                            <svg class=\\\"w-6 h-6\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4\\\"></path></svg>\\n                                            Archive\\n                                        </button>\\n                                    </li>\\n                                    <li class=\\\"main-panel--tasks__item--dropdown__item\\\">\\n                                        <button type=\\\"button\\\" class=\\\"main-panel--tasks__item--dropdown__delete\\\" data-postindex=\\\"\").concat(task.id, \"\\\">\\n                                            <svg class=\\\"w-6 h-6\\\"\\n                                                fill=\\\"none\\\"\\n                                                stroke=\\\"currentColor\\\"\\n                                                viewBox=\\\"0 0 24 24\\\"\\n                                                xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n                                                <path stroke-linecap=\\\"round\\\"\\n                                                    stroke-linejoin=\\\"round\\\"\\n                                                    stroke-width=\\\"2\\\"\\n                                                    d=\\\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\\\">\\n                                                </path>\\n                                            </svg>\\n                                            Delete\\n                                        </button>\\n                                    </li>\\n                                </ul>\\n                            </div>\\n                        </div>\\n\\t\\t\\t\\t\\t</li>\\n                \");\n\n      if (task.isArchived) {\n        archived += taskDom;\n      } else if (task.dueTime) {\n        var t = new Date(task.dueTime);\n\n        if ((t - dateToday) / msPerDay <= 0.5) {\n          today += taskDom;\n        } else if ((t - dateToday) / msPerDay <= 1) {\n          tomorrow += taskDom;\n        } else {\n          nextSevenDays += taskDom;\n        }\n      } else {\n        untimed += taskDom;\n      }\n    });\n\n    switch (currentTime) {\n      case 'Today':\n        {\n          return {\n            'Today': today\n          };\n        }\n\n      case 'Next 7 Days':\n        {\n          return {\n            'Next 7 Days': nextSevenDays\n          };\n        }\n\n      case 'Archived':\n        {\n          return {\n            'Archived': archived\n          };\n        }\n\n      default:\n        {\n          return {\n            'Today': today,\n            'Tomorrow': tomorrow,\n            'Next 7 Days': nextSevenDays,\n            'Untimed': untimed\n          };\n        }\n    }\n  }\n\n  function createCategoryDoms() {\n    var domElements = '';\n    Object.keys(categories).forEach(function (category) {\n      domElements += \"\\n                <li class=\\\"side-panel--category\\\">\\n                    <button class=\\\"side-panel--category__title\\\" data-filter=\\\"\".concat(categories[category].name, \"\\\" data-filtertype=\\\"category\\\">\\n                        <span style=\\\"background-color: \").concat(categories[category].color, \"\\\">&nbsp;</span>\\n                        \").concat(categories[category].name, \"\\n                    </button>\\n                    <button class=\\\"side-panel--category__del\\\" data-category=\\\"\").concat(categories[category].name, \"\\\">\\n                        <svg class=\\\"w-6 h-6\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M6 18L18 6M6 6l12 12\\\"></path></svg>\\n                    </button>\\n                </li>\\n            \");\n    });\n    return domElements;\n  }\n\n  function fillInfoPanelWithData(index, panel) {\n    var task = getTaskById(index);\n    panel.querySelector('.modal--task__title').innerText = task.title;\n    panel.querySelector('.modal--task__description').innerText = task.note;\n    panel.querySelector('.modal--task__bar--duetime').innerText = task.dueTime !== '' ? task.dueTime : 'No due time';\n    panel.querySelector('.modal--task__bar--category').innerText = task.category ? task.category.name : 'Uncategorized';\n  }\n\n  function fillEditPanelWithData(index, panel) {\n    var task = getTaskById(index);\n    panel.querySelector('#taskTitle').value = task['title'];\n\n    if (task['note']) {\n      panel.querySelector('#taskNote').value = task['note'];\n    }\n\n    if (task['dueTime']) {\n      panel.querySelector('#taskTime').value = task['dueTime'];\n    }\n\n    if (task['category']) {\n      panel.querySelector('#taskCategory').value = task['category']['name'];\n    }\n  }\n\n  function changeTaskDoneness(index) {\n    var task = getTaskById(index);\n    task.isDone = !task.isDone;\n    saveToLocalStorage();\n  }\n\n  function getUncompletedTasksLength() {\n    return tasks.filter(function (task) {\n      return !task.isDone && !task.isArchived;\n    }).length;\n  }\n\n  function getDueTasksCounters() {\n    var counterObj = {\n      'today': 0,\n      'tomorrow': 0,\n      'nextSevenDays': 0,\n      'untimed': 0,\n      'uncompleted': getUncompletedTasksLength()\n    };\n    var dateToday = new Date();\n    var msPerDay = 24 * 60 * 60 * 1000;\n    tasks.filter(function (task) {\n      return !task.isArchived && !task.isDone;\n    }).forEach(function (task) {\n      if (task.dueTime) {\n        var t = new Date(task.dueTime);\n\n        if ((t - dateToday) / msPerDay <= 0.5) {\n          counterObj.today += 1;\n        } else if ((t - dateToday) / msPerDay <= 1) {\n          counterObj.tomorrow += 1;\n        } else {\n          counterObj.nextSevenDays += 1;\n        }\n      } else {\n        counterObj.untimed += 1;\n      }\n    });\n    return counterObj;\n  }\n\n  function deleteTaskById(index) {\n    for (var i = 0; i < tasks.length; ++i) {\n      if (index == tasks[i]['id']) {\n        tasks.splice(i, 1);\n        break;\n      }\n    }\n\n    saveToLocalStorage();\n  }\n\n  function fillDropdownWithCategories(dropdown) {\n    dropdown.innerHTML = '';\n\n    if (Object.keys(categories).length !== 0) {\n      Object.keys(categories).forEach(function (category) {\n        dropdown.innerHTML += \"\\n                    <option value=\\\"\".concat(categories[category].name, \"\\\">\").concat(categories[category].name, \"</option>\\n                \");\n      });\n    } else {\n      dropdown.innerHTML = '<option value=\"\" selected disabled>No categories available</option>';\n    }\n  }\n\n  function deleteOverDueTasks() {\n    var n = tasks.length - 1;\n    var i = 0;\n    var dateNow = new Date();\n    var msPerDay = 24 * 60 * 60 * 1000;\n\n    while (i <= n) {\n      var t = new Date(tasks[i].dueTime);\n\n      if ((t - dateNow) / msPerDay < -1) {\n        tasks[i] = tasks[n];\n        --n;\n      } else {\n        ++i;\n      }\n    }\n\n    tasks.splice(n + 1, tasks.length - n);\n    saveToLocalStorage();\n  }\n\n  function saveToLocalStorage() {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    localStorage.setItem('categories', JSON.stringify(categories));\n    localStorage.setItem('idCounter', JSON.stringify(idCounter));\n  }\n\n  function loadFromLocalStorage() {\n    if (localStorage.getItem('tasks')) {\n      tasks = JSON.parse(localStorage.getItem('tasks'));\n    }\n\n    if (localStorage.getItem('categories')) {\n      categories = JSON.parse(localStorage.getItem('categories'));\n    }\n\n    if (localStorage.getItem('idCounter')) {\n      idCounter = parseInt(JSON.parse(localStorage.getItem('idCounter')));\n    }\n  }\n\n  function archiveTaskById(index) {\n    var task = getTaskById(index);\n    task.isArchived = !task.isArchived;\n    saveToLocalStorage();\n  }\n\n  function deleteCategoryByName(name) {\n    delete categories[name];\n    getTasksByCategory(name).forEach(function (task) {\n      task.category = undefined;\n    });\n    saveToLocalStorage();\n  }\n\n  return {\n    createTask: createTask,\n    editTask: editTask,\n    createTaskDoms: createTaskDoms,\n    fillInfoPanelWithData: fillInfoPanelWithData,\n    fillEditPanelWithData: fillEditPanelWithData,\n    changeTaskDoneness: changeTaskDoneness,\n    getDueTasksCounters: getDueTasksCounters,\n    deleteTaskById: deleteTaskById,\n    createCategory: createCategory,\n    createCategoryDoms: createCategoryDoms,\n    fillDropdownWithCategories: fillDropdownWithCategories,\n    loadFromLocalStorage: loadFromLocalStorage,\n    archiveTaskById: archiveTaskById,\n    deleteCategoryByName: deleteCategoryByName\n  };\n}();\n\nmodule.exports = {\n  taskController: taskController\n};\n\n//# sourceURL=webpack://todoapp/./src/script/taskController.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;